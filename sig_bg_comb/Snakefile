from snakemake.utils import min_version

min_version("6.0")

# noinspection PyUnresolvedReferences
configfile: "config.json"

# inspection PyUnresolvedReferences
rule all:
    params:
        signal=config["signal"],
        background=config["background"]
    input: f'{config["output"]}.combine'

signal_config = {"signal": rules.all.params.signal, "nFilesPerJob": config["nFilesPerJob"],
                 "output": f'{config["output"]}.signal'}

module signal:
    snakefile: "signal/Snakefile"
    config: signal_config

use rule * from signal as signal_ *

rule background1_make:
    params:
        opt_inDS=rules.all.params.background,
        opt_exec="echo %IN > opq.root; echo %IN > xyz.pool",
        opt_args=expand("--outputs opq.root,xyz.pool --nGBPerJob {nGBPerJob}",nGBPerJob=config["nGBPerJob"])
    output: f'{config["output"]}.background1'
    shell: "prun"

rule premix:
    params:
        opt_inDS=rules.signal_make.output[0],
        opt_inDsType="def.zip",
        opt_secondaryDSs=rules.background1_make.output,
        opt_secondaryDsTypes=["xyz.pool"],
        opt_exec="echo %IN %IN2 > klm.root",
        opt_args=lambda wildcards: '--outputs klm.root --secondaryDSs IN2:2:%{DS1}'
    output: f'{config["output"]}.premix'
    input: rules.signal_make.output,rules.background1_make.output
    shell: "prun"

rule generate_some:
    params:
        opt_exec="echo %RNDM:10 > gen.root",
        opt_args=expand("--outputs gen.root --nJobs {nJobs}",nJobs=config["nJobs"])
    output: f'{config["output"]}.some'
    shell: "prun"

rule background2_make:
    params:
        opt_inDS=rules.all.params.background,
        opt_containerImage="docker://alpine",
        opt_secondaryDSs=rules.generate_some.output,
        opt_secondaryDsTypes=["gen.root"],
        opt_exec="echo %IN > ooo.root; echo %IN2 > jjj.txt",
        opt_args=lambda wildcards: '--outputs ooo.root,jjj.txt --secondaryDSs IN2:2:%{DS1}'
    output: f'{config["output"]}.background2'
    input: rules.generate_some.output
    shell: "prun"

rule combine:
    params:
        opt_inDS=rules.signal_make.output[0],
        opt_inDsType="abc.dat",
        opt_secondaryDSs=[rules.premix.output[0], rules.background2_make.output[0]],
        opt_secondaryDsTypes=["klm.root", "ooo.root"],
        opt_exec="echo %IN %IN2 %IN3 > aaa.root",
        opt_args=lambda wildcards: '--outputs aaa.root --secondaryDSs IN2:2:%{DS1},IN3:5:%{DS2}'
    output: f'{config["output"]}.combine'
    input: rules.signal_make.output,rules.premix.output,rules.background2_make.output
    shell: "prun"
